
# TLS truststore
#ssl.truststore.location=/opt/cloudera/security/jks/truststore.jks
%prod.kafka.bootstrap.servers=${SPARTAN_KAFKA_SERVER_ADDRESS:redpanda-1:9092}
#%prod.kafka.ssl.endpoint.identification.algorithm=${SPARTAN_KAFKA_IDENTIFICATION_ALGO:"HTTPS"}
%prod.kafka.security.protocol=SSL
%prod.kafka.ssl.truststore.location=${REDPANDA_SSL_TRUSTSTORE_LOCATION:/var/private/ssl/ca/truststore.jks}
%prod.kafka.ssl.truststore.type=JKS
%prod.kafka.ssl.keystore.type=JKS
#%prod.kafka.ssl.keystore.key=${REDPANDA_SSL_KEYSTORE_KEY:/var/private/ssl/tls.key}
%prod.kafka.ssl.keystore.location=${REDPANDA_SSL_KEYSTORE_LOCATION:/var/private/ssl/keystore.jks}
%prod.kafka.ssl.keystore.password=${REDPANDA_SSL_KEYSTORE_PASSWORD:ajfbsdkjb}
%prod.kafka.ssl.client.auth=required
%prod.kafka.sasl.mechanism=${REDPANDA_SASL_MECHANISM:"PLAIN"}

quarkus.container-image.registry=ghcr.io
quarkus.container-image.group=devsinghnaini
quarkus.opentelemetry.enabled=true 
quarkus.opentelemetry.tracer.exporter.otlp.endpoint=${KUBERNETES_OTLP_ENDPOINT:my-release-signoz-otel-collector.svc.cluster.local:4317}
quarkus.opentelemetry.tracer.resource-attributes=${QUARKUS_OPENTELEMETRY_TRACER_RESOURCE_ATTRIBUTES:service.name=quarkus-http-redpanda}
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n  

# Alternative to the console log
#quarkus.http.access-log.pattern="...traceId=%{X,traceId} spanId=%{X,spanId}"


quarkus.log.level=DEBUG
#quarkus.http.port=9000
%dev.kafka.bootstrap.servers=localhost:9092
mp.messaging.outgoing.kafka_topic.connector=smallrye-kafka
mp.messaging.outgoing.kafka_topic.topic=${SPARTANS_KAFKA_OUTPUT_TOPIC:hl7}
mp.messaging.outgoing.kafka_topic.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
mp.messaging.outgoing.kafka_topic.key.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
mp.messaging.outgoing.kafka_topic.schema.registry.url=${SPARTANS_KAFKA_SCHEMA_REGISTRY_URL:http://localhost:8081}
# %prod.mp.messaging.outgoing.kafka_topic.bootstrap.servers=${SPARTAN_KAFKA_SERVER_ADDRESS:redpanda-1:9092}
# #%prod.mp.messaging.outgoing.kafka_topic.ssl.endpoint.identification.algorithm=${SPARTAN_KAFKA_IDENTIFICATION_ALGO:""}
# %prod.mp.messaging.outgoing.kafka_topic.security.protocol=SSL
# %prod.mp.messaging.outgoing.kafka_topic.ssl.truststore.location=${REDPANDA_SSL_TRUSTSTORE_LOCATION:/var/private/ssl/ca/truststore.jks}
# %prod.mp.messaging.outgoing.kafka_topic.ssl.truststore.type=JKS
# %prod.mp.messaging.outgoing.kafka_topic.ssl.keystore.type=JKS
# #%prod.mp.messaging.outgoing.kafka_topic.ssl.keystore.key=${REDPANDA_SSL_KEYSTORE_KEY:/var/private/ssl/tls.key}
# %prod.mp.messaging.outgoing.kafka_topic.ssl.keystore.location=${REDPANDA_SSL_KEYSTORE_LOCATION:/var/private/ssl/keystore.jks}
# %prod.mp.messaging.outgoing.kafka_topic.ssl.keystore.password=${REDPANDA_SSL_KEYSTORE_PASSWORD:ajfbsdkjb}
# %prod.mp.messaging.outgoing.kafka_topic.ssl.client.auth=required
# %prod.mp.messaging.outgoing.kafka_topic.sasl.mechanism=${REDPANDA_SASL_MECHANISM:"PLAIN"}

quarkus.apicurio-registry.devservices.enabled=false
quarkus.kafka.devservices.enabled=false
